//https://leetcode.com/problems/minimize-malware-spread/
import java.util.*;
public class MinimizeMalware{
    int[] parent;
    int[] size;
    
    public int find(int x){
        if(parent[x]==x)return x;
        return parent[x]=find(parent[x]);
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n=graph.length;
        parent =new int[n];
        size = new int[n];
        
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].length;j++){
                if(graph[i][j]==1){
                    int par1 = find(i);
                    int par2 = find(j);
                    if(par1!=par2){
                        if(size[par1]>size[par2]){
                            parent[par2]=par1;
                            size[par1]+=size[par2];
                        }
                        else{
                            parent[par1]=par2;
                            size[par2]+=size[par1];
                        }
                    }
                }
            }
        }
        
        
        int []infected = new int[n];
        for(int i=0;i<initial.length;i++){
            int p = find(initial[i]);
            infected[p]++;
        }
        int ans=-1;
        int maxsize=-1;
        for(int i=0;i<initial.length;i++){
            int p = find(initial[i]);
            if(infected[p]==1 && size[p]>=maxsize){
                if(size[p]==maxsize){
                    ans = Math.min(ans,initial[i]);
                }
                else{
                    ans = initial[i];
                }
                maxsize = size[p];
            }
        }
        if(ans==-1){
            int min = n+1;
            for(int i=0;i<initial.length;i++){
                min = Math.min(min,initial[i]);
            }
            return min;
        }
        return ans;
        
    }
}