// https://leetcode.com/problems/minimize-malware-spread-ii/
import java.util.*;
public class MinimizeMalwareTwo {
    int[] parent;
    int[] size;
    
    public int find(int x){
        if(parent[x]==x)return x;
        return parent[x]=find(parent[x]);
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
     int n=graph.length;
        parent =new int[n];
        size = new int[n];
        
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
        
        HashSet<Integer> hs = new HashSet<>();
        for(int e: initial){
            hs.add(e);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].length;j++){
                if(graph[i][j]==1 && !hs.contains(i) && !hs.contains(j)){
                    int par1 = find(i);
                    int par2 = find(j);
                    if(par1!=par2){
                        if(size[par1]>size[par2]){
                            parent[par2]=par1;
                            size[par1]+=size[par2];
                        }
                        else{
                            parent[par1]=par2;
                            size[par2]+=size[par1];
                        }
                    }
                }
            }
        }
    HashMap<Integer,HashSet<Integer>> map = new HashMap<>();
    int[] infected = new int[n];
    for(int u:initial){
        map.put(u,new HashSet<>());
        for(int j=0;j<n;j++){
            if(graph[u][j]==1 && u!=j && !hs.contains(j) ){
                int p=find(j);
                if(!map.get(u).contains(p)){
                    infected[p]++;
                    map.get(u).add(p);
                }
                
            }
        }
    }
       
    int ans=-1;
    int max=-1;
    
        
    for(int u:initial){
        HashSet<Integer>pars = map.get(u);
        int total=0;
        for(int par:pars){
            if(infected[par]==1){
                total+=size[par];
            }
        }
        if(total>=max){
            if(total==max){
            ans=Math.min(ans,u);    
            }
            else{
                ans=u;
            }
            max=total;
        }
    }
        
        
     if(ans==-1){
            int min = n+1;
            for(int i=0;i<initial.length;i++){
                min = Math.min(min,initial[i]);
            }
            return min;
        }
        return ans;
        
        
        
    }
}
